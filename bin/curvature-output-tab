#!/usr/bin/env python
# -*- coding: UTF-8 -*-

import os
import sys

# Add our parent folder to our path
sys.path.insert(0, os.path.join(os.path.dirname(os.path.dirname(__file__)), 'lib'))

import codecs
import msgpack
import argparse
from curvature.geomath import Units

parser = argparse.ArgumentParser(description='Output a tab-delimited file listing segments.')
parser.add_argument('--units', type=str, default='mi', choices=['mi', 'km'], help='Distance units in the output, km or mi Default: mi')
args = parser.parse_args()

# Set our output to default to UTF-8
reload(sys)
sys.setdefaultencoding('utf-8')
sys.stderr = codecs.getwriter('utf8')(sys.stderr)
sys.stdout = codecs.getwriter('utf8')(sys.stdout)

units = Units(args.units)

sys.stdout.write("Curvature\tLength (%s)\tId\tName\tCounty\tHighway\n" % (args.units))

unpacker = msgpack.Unpacker(sys.stdin, use_list=True)
for collection in unpacker:
    for way in collection:
        if 'curvature' in way:
            curvature = way['curvature']
        else:
            curvature = 0
        if 'length' in way:
            length = way['length']
        else:
            length = 0
        if 'name' in way['tags']:
            name = way['tags']['name']
        else:
            name = ''
        if 'highway' in way['tags']:
            highway = way['tags']['highway']
        else:
            highway = ''
        if 'county' in way['tags']:
            county = way['tags']['county']
        else:
            county = ''
        sys.stdout.write("%d\t%9.2f\t%10s\t%25s\t%20s\t%20s\n" % (curvature, units.convert(length), way['id'], name, highway, county))

sys.stdout.write("\n")
